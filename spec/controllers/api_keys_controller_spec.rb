require 'spec_helper'
require 'pp'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ApiKeysController do

  login_user

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ApiKeysController. Be sure to keep this updated too.

  it "should have a current_user" do
    # note the fact that I removed the "validate_session" parameter if this was a scaffold-generated controller
    subject.current_user.should_not be_nil
  end

  it "should get index" do
    # Note, rails 3.x scaffolding may add lines like get :index, {}, valid_session
    # the valid_session overrides the devise login. Remove the valid_session from your specs
    get 'index'
    response.should be_success
  end

  describe "GET index" do
    it "assigns all api_keys as @api_keys" do
      api_key = FactoryGirl.create(:api_key)
      get :index, {}
      assigns(:api_keys).should eq([api_key])
    end
  end

  describe "GET show" do
    it "assigns the requested api_key as @api_key" do
      api_key = FactoryGirl.create(:api_key)
      get :show, {:id => api_key.to_param}
      assigns(:api_key).should eq(api_key)
    end
  end

  describe "GET new" do
    it "assigns a new api_key as @api_key" do
      get :new, {}
      assigns(:api_key).should be_a_new(ApiKey)
    end
  end

  describe "GET edit" do
    it "assigns the requested api_key as @api_key" do
      api_key = FactoryGirl.create(:api_key)
      get :edit, {:id => api_key.to_param}
      assigns(:api_key).should eq(api_key)
    end
  end

  describe "POST create" do
      it "creates a new ApiKey" do
        expect {
          # post :create, FactoryGirl.build(:api_key).attributes.symbolize_keys 
          post :create, :api_key => FactoryGirl.attributes_for(:api_key)
        }.to change(ApiKey, :count).by(1)
      end

      it "assigns a newly created api_key as @api_key" do
        post :create, :api_key => FactoryGirl.attributes_for(:api_key)
        assigns(:api_key).should be_a(ApiKey)
        assigns(:api_key).should be_persisted
      end

      it "redirects to the created api_key" do
        post :create, :api_key => FactoryGirl.attributes_for(:api_key)
        response.should redirect_to(ApiKey.last)
      end

    describe "with invalid params" do
      it "assigns a newly created but unsaved api_key as @api_key" do
        # Trigger the behavior that occurs when invalid params are submitted
        ApiKey.any_instance.stub(:save).and_return(false)
        post :create, {:api_key => { "id" => "invalid value" }}
        assigns(:api_key).should be_a_new(ApiKey)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ApiKey.any_instance.stub(:save).and_return(false)
        post :create, {:api_key => { "id" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested api_key" do
        api_key = FactoryGirl.create(:api_key)
        # Assuming there are no other api_keys in the database, this
        # specifies that the ApiKey created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ApiKey.any_instance.should_receive(:update_attributes).with({ "id" => "MyString"})
        put :update, {:id => api_key.to_param, :api_key => { "id" => "MyString" }}
      end

      it "assigns the requested api_key as @api_key" do
        api_key = FactoryGirl.create(:api_key)
        put :update, {:id => api_key.to_param, :api_key => FactoryGirl.attributes_for(:api_key)}
        assigns(:api_key).should eq(api_key)
      end

      it "redirects to the api_key" do
        api_key = FactoryGirl.create(:api_key)
        put :update, {:id => api_key.to_param, :api_key => FactoryGirl.attributes_for(:api_key)}
        response.should redirect_to(api_key)
      end
    end

    describe "with invalid params" do
      it "assigns the api_key as @api_key" do
        api_key = FactoryGirl.create(:api_key)
        # Trigger the behavior that occurs when invalid params are submitted
        ApiKey.any_instance.stub(:save).and_return(false)
        put :update, {:id => api_key.to_param, :api_key => { "id" => "invalid value" }}
        assigns(:api_key).should eq(api_key)
      end

      it "re-renders the 'edit' template" do
        api_key = FactoryGirl.create(:api_key)
        # Trigger the behavior that occurs when invalid params are submitted
        ApiKey.any_instance.stub(:save).and_return(false)
        put :update, {:id => api_key.to_param, :api_key => { "id" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested api_key" do
      api_key = FactoryGirl.create(:api_key)
      expect {
        delete :destroy, {:id => api_key.to_param}
      }.to change(ApiKey, :count).by(-1)
    end

    it "redirects to the api_keys list" do
      api_key = FactoryGirl.create(:api_key)
      delete :destroy, {:id => api_key.to_param}
      response.should redirect_to(api_keys_url)
    end
  end

end
